################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
from model.models import Model
from string import Template

class AbstractWidget(Model):
    xamlTemplate = Template("""
        <$widget $attributes Grid.Row='$row' Grid.Column='$col'/>"""
    )
    attributesMap = {
        'tabindex': {"cs": "TabIndex='$value'"},
        'name': {"cs": "Name='$value'"},
        'width': {"cs": "Width='$value'"},
        'enabled': {"cs": "IsEnabled='$value'"},
        'height': {"cs": "Height='$value'"},
        'visible': {"cs": "Visibility='$value'"},
        'source': {"cs": "='$value'"},
        'verticalalignment': {"cs": "VerticalAlignment='$value'"},
        'horizontalalignment': {"cs": "HorizontalAlignment='$value'"},
        'label': {"cs": "Content='$value'"},
        'location': {"cs": "='$value'"},
        'rowindex': {'cs': "Grid.Row='$value'"},
        'colindex': {'cs': "Grid.Column='$value'"}
    }


    def getXamlCode(self, rowIndex=None, colIndex=None):
        pass

    def getHtmlCode(self):
        pass


    def generateXamlCode(self, template=None, attributesMap=None, **kwargs):
        if not template:
            template = self.xamlTemplate

        if not attributesMap: attributesMap = {}
        atts = ""

        AbstractWidget.attributesMap.update(attributesMap)

        for element in self.getNoneEmptyAttributes():
            if not AbstractWidget.attributesMap.has_key(element[0].lower()):
                continue
            attTemplate = Template(AbstractWidget.attributesMap[element[0].lower()]['cs'])
            attValue = str(element[1]['value'])
            atts += "%s  " % attTemplate.substitute({'value': attValue})

        kwargs.update(dict(attributes=atts))

        return template.substitute(kwargs)


class BaseWidget(AbstractWidget, Model):
    """Base class for all widgets."""


    def __init__(self):
        object.__init__(self)
        Model.__init__(self, self.__defaults())

    def __defaults(self):
        return {'tabindex': {'constraint': '^[+-]?((\\d+(\\.\\d*)?)|\\.\\d+)([eE][+-]?[0-9]+)?$'},
                'name': {'constraint': '^[a-zA-Z][_\\w\\d]*$'},
                'width': {'constraint': '^[+-]?((\\d+(\\.\\d*)?)|\\.\\d+)([eE][+-]?[0-9]+)?$'},
                'enabled': {'constraint': '^(True|False|true|false)$'},
                'tooltip': {'constraint': '.*'},
                'height': {'constraint': '^[+-]?((\\d+(\\.\\d*)?)|\\.\\d+)([eE][+-]?[0-9]+)?$'},
                'visible': {'constraint': '^(True|False|true|false)$'},
                'horizontalalignment': {'constraint': '^(center|left|right|stretch)$'},
                'source': {'constraint': '^[a-zA-Z][\\._\\w\\d]*[_\\w\\d]$'},
                'verticalalignment': {'constraint': '^(center|left|right|stretch)$'},
                'label': {'constraint': '.*'},
                'location': {'constraint': '^[a-zA-Z][\\._\\w\\d]*[_\\w\\d]$'},
                'widgets': {'constraint': '.*'}}


    height = property(lambda self: self.getAttribute("height"),
                      lambda self, data: self.setAttribute('height', data))

    visible = property(lambda self: self.getAttribute("visible"),
                       lambda self, data: self.setAttribute('visible', data))

    horizontalAlignment = property(lambda self: self.getAttribute("horizontalAlignment"),
                                   lambda self, data: self.setAttribute('horizontalAlignment', data))

    name = property(lambda self: self.getAttribute("name"),
                    lambda self, data: self.setAttribute('name', data))

    width = property(lambda self: self.getAttribute("width"),
                     lambda self, data: self.setAttribute('width', data))

    enabled = property(lambda self: self.getAttribute("enabled"),
                       lambda self, data: self.setAttribute('enabled', data))

    tooltip = property(lambda self: self.getAttribute("tooltip"),
                       lambda self, data: self.setAttribute('tooltip', data))

    label = property(lambda self: self.getAttribute("label"),
                     lambda self, data: self.setAttribute('label', data))

    source = property(lambda self: self.getAttribute("source"),
                      lambda self, data: self.setAttribute('source', data))

    verticalAlignment = property(lambda self: self.getAttribute("verticalAlignment"),
                                 lambda self, data: self.setAttribute('verticalAlignment', data))

    location = property(lambda self: self.getAttribute("location"),
                        lambda self, data: self.setAttribute('location', data))

    tabindex = property(lambda self: self.getAttribute("tabindex"),
                        lambda self, data: self.setAttribute('tabindex', data))

    widgets = property(lambda self: self.getAttribute("widgets"))

    @staticmethod
    def isWidget(widget):
    #        return type(widget) in WidgetSelector.widgets.itervalues()
        return isinstance(widget, AbstractWidget)

    def addWidget(self, widget):
        if not BaseWidget.isWidget(widget):
            raise Exception, "Unknown widget type %s" % widget
        self.widgets[widget.name] = widget


##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class DateTimePicker(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <DatePicker $attributes/>"""
#    )

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {'showDayHeader': {'constraint': '.*'},
                'selectionMode': {'constraint': '.*'},
                'showNextPrevMonth': {'constraint': '.*'}}

    def getXamlCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(widget="DatePicker", row=rowIndex, col=colIndex)


    showDayHeader = property(lambda self: self.getAttribute("showDayHeader"),
                             lambda self, data: self.setAttribute('showDayHeader', data))

    selectionMode = property(lambda self: self.getAttribute("selectionMode"),
                             lambda self, data: self.setAttribute('selectionMode', data))

    showNextPrevMonth = property(lambda self: self.getAttribute("showNextPrevMonth"),
                                 lambda self, data: self.setAttribute('showNextPrevMonth', data))


##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class Spinner(BaseWidget, Model):
    xamlTemplate = Template("""
        <Spinner Name='$name'  Height='$height' Width='$width' TabIndex='$tabIndex' IsEnabled='$isEnabled'
        Visibility='$visibility' ToolTip='$toolTip' Grid.Row='$row' Grid.Column='@column' Grid.ColumnSpan='$colSpan'
         Grid.RowSpan='$rowSpan' VerticalAlignment='$verticalAlignment' HorizontalAlignment='$horizontalAlignment'
             />"""
    )

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {'type': {'constraint': '.*'},
                'maxValue': {'constraint': '^[+-]?((\\d+(\\.\\d*)?)|\\.\\d+)([eE][+-]?[0-9]+)?$'},
                'minValue': {'constraint': '^[+-]?((\\d+(\\.\\d*)?)|\\.\\d+)([eE][+-]?[0-9]+)?$'}}


    type = property(lambda self: self.getAttribute("type"), lambda self, data: self.setAttribute('type', data))

    maxValue = property(lambda self: self.getAttribute("maxValue"),
                        lambda self, data: self.setAttribute('maxValue', data))

    minValue = property(lambda self: self.getAttribute("minValue"),
                        lambda self, data: self.setAttribute('minValue', data))

##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class CheckBox(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <CheckBox $attributes/>"""
#    )
    attributesMap = {
        'checked': {"cs':'Checked='$value'"}
    }

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {'checked': {'constraint': '^(True|False|true|false)$'}}

    checked = property(lambda self: self.getAttribute("checked"),
                       lambda self, data: self.setAttribute('checked', data))

    def getXamlCode(self, rowIndex=None, colIndex=None):
        self.generateXamlCode(attributesMap=self.attributesMap, widget="CheckBox", row=rowIndex, col=colIndex)

        #,row=rowIndex,col=colIndex

##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class Combo(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <ComboBox $attributes/>"""
#    )

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {}

    def getXamlCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(widget="ComboBox", row=rowIndex, col=colIndex)


##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class Image(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <Image $attributes/>"""
#    )

    attributesMap = {
        'src': {"cs':'Source='$value'"}
    }

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {'src': {'constraint': '.*'},
                'alt': {'constraint': '.*'}}


    src = property(lambda self: self.getAttribute("src"), lambda self, data: self.setAttribute('src', data))

    alt = property(lambda self: self.getAttribute("alt"), lambda self, data: self.setAttribute('alt', data))

    def getXamlCode(self, rowIndex=None, colIndex=None):
        self.generateXamlCode(attributesMap=self.attributesMap, widget="Image", row=rowIndex, col=colIndex)


##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################

class RadioButton(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <RadioButton $attributes/>"""
#    )

    attributesMap = {
        'groupName': {"cs": "GroupName='$value'"},
        'checked': {"cs": "Checked='$value'"}
    }

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {'groupName': {'constraint': '^[a-zA-Z][_\\w\\d]*$'},
                'checked': {'constraint': '^(True|False|true|false)$'}}


    groupName = property(lambda self: self.getAttribute("groupName"),
                         lambda self, data: self.setAttribute('groupName', data))

    checked = property(lambda self: self.getAttribute("checked"), lambda self, data: self.setAttribute('checked', data))

    def getXamlCode(self, rowIndex=None, colIndex=None):
        self.generateXamlCode(attributesMap=self.attributesMap, widget="RadioButton", row=rowIndex, col=colIndex)

##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class TextBox(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <TextBox $attributes/>"""
#    )

    attributesMap = {
        'readonly': {'cs': "IsReadOnly='$value'"},
        'textMode': {'cs': ""},
        'textalignment': {'cs': "TextAlignment='$value'"}
    }


    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {'readonly': {'constraint': '^(True|False|true|false)$'},
                'textMode': {'constraint': '(single|multiple)'},
                'textAlignment': {'constraint': '(left|right|center|justify)'}}


    readonly = property(lambda self: self.getAttribute("readonly"),
                        lambda self, data: self.setAttribute('readonly', data))

    textMode = property(lambda self: self.getAttribute("textMode"),
                        lambda self, data: self.setAttribute('textMode', data))

    textAlignment = property(lambda self: self.getAttribute("textAlignment"),
                             lambda self, data: self.setAttribute('textAlignment', data))

    def getHtmlCode(self):
        return self.__dict__

        #        super(TextBox, self).getHtmlCode()

    def getXamlCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(attributesMap=self.attributesMap, widget="TextBox", row=rowIndex, col=colIndex)


##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class Label(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <Label $attributes/>"""
#    )

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {}

    def getXamlCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(widget="Label", row=rowIndex, col=colIndex)


##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class ListBox(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <ListBox $attributes/>"""
#    )

    attributesMap = {
        'selectionMode': {'cs': "selectionMode='$value'"}
    }

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {'selectionMode': {'constraint': '(single|multiple)'}}


    selectionMode = property(lambda self: self.getAttribute("selectionMode"),
                             lambda self, data: self.setAttribute('selectionMode', data))


    def getXamlCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(attributesMap=self.attributesMap, widget="ListBox", row=rowIndex, col=colIndex)
        ##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class Button(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <Button $attributes Grid.Row='$row' Grid.Column='$col'/>"""
#    )

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {}

    def getHtmlCode(self):
        pass


    def getXamlCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(widget="Button", row=rowIndex, col=colIndex)

        #        attributes = ""

#        for element in self.getNoneEmptyAttributes():
#            attTemplate = Template(BaseWidget.attributesMap[element[0].lower()]['cs'])
#            attValue = str(element[1]['value'])
#            attributes += "%s  " % attTemplate.substitute({'value': attValue})
#
#        return self.xamlTemplate.substitute(dict(attributes=attributes))


##############################   end of class    ###############################

class Page(AbstractWidget):
    def __init__(self):
        Model.__init__(self, self.__defaults())

    def addWidget(self, widget):
        if self.layout <> None:
            raise  Exception, "When layout already defined, widget should not add"
        self.addWidgetName(widget.name)
        self.widgets.append(widget)

    def addWidgetName(self, name):
        if name in self.widgetNames:
            raise  Exception, "Duplicate widget name : %s " % name
        self.widgetNames.append(name)

    def __defaults(self):
        return {'widgets': {'value': []},
                'widgetNames': {'value': []},
                'layout': {},
                'name': {}
        }

    widgets = property(lambda self: self.getAttribute("widgets"))
    widgetNames = property(lambda self: self.getAttribute("widgetNames"))
    layout = property(lambda self: self.getAttribute("layout"), lambda self, data: self.setAttribute('layout', data))
    name = property(lambda self: self.getAttribute("name"), lambda self, data: self.setAttribute('name', data))


class  Row(AbstractWidget):
    xamlTemplate = Template("<RowDefinition  $attributes/>")

    attributesMap = {
        'height': {'cs': "Height='$value'"}
    }

    def __init__(self):
        Model.__init__(self, self.__defaults())

    def addCell(self, cell):
        self.cells.append(cell)

    def __defaults(self):
        return {'cells': {'value': []},
                'height': {'constraint': '^[+-]?((\\d+(\\.\\d*)?)|\\.\\d+)([eE][+-]?[0-9]+)?$'}
        }

    cells = property(lambda self: self.getAttribute("cells"))
    height = property(lambda self: self.getAttribute("height"), lambda self, data: self.setAttribute('height', data))

    def getXamlCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(self.xamlTemplate, self.attributesMap, row=rowIndex, col=colIndex)


class  Cell(AbstractWidget):
    xamlTemplate = Template(( "<ColumnDefinition $attributes/>" ))

    attributesMap = {
        "width": {"cs": "Width='$value'"},
        "name": {"cs": "Name='$value'"}
    }

    def __init__(self):
        Model.__init__(self, self.__defaults())

    def addWidget(self, widget):
        if not BaseWidget.isWidget(widget):
            raise Exception, "Malformed widget type"
        self.widgets.append(widget)

    def __defaults(self):
        return {'widgets': {'value': []},
                'name': {},
                'flow': {'constraint': '^(horizontal|vertical|none)$'},
                'width': {'constraint': '^[+-]?((\\d+(\\.\\d*)?)|\\.\\d+)([eE][+-]?[0-9]+)?$'}
        }

    widgets = property(lambda self: self.getAttribute("widgets"))
    name = property(lambda self: self.getAttribute("name"), lambda self, data: self.setAttribute('name', data))
    flow = property(lambda self: self.getAttribute("flow"), lambda self, data: self.setAttribute('flow', data))
    width = property(lambda self: self.getAttribute("width"), lambda self, data: self.setAttribute('width', data))

    def getXamlCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(self.xamlTemplate, self.attributesMap, row=rowIndex, col=colIndex)


class  Layout(AbstractWidget):
#    Grid.Row='$row' Grid.Column='$col'
    xamlTemplate = Template("""
    <Grid  $attributes >
    <Grid.RowDefinitions>
        $rowsDefinition
    </Grid.RowDefinitions>

    <Grid.ColumnDefinitions>
      $colsDefinition
    </Grid.ColumnDefinitions>

      $content
    </Grid>
    """)

    #Width='$width' Height='$height'


    def __init__(self):
        Model.__init__(self, self.__defaults())

    def addRow(self, row):
        if type(row) <> Row:
            raise Exception, "Malformed row type"
        self.rows.append(row)

    def __defaults(self):
        return {'name': {},
                'rows': {'value': []},
                'flow': {'constraint': '^(horizontal|vertical|none)$'},
                "rowIndex": {'constraint': '^[+-]?((\\d+(\\.\\d*)?)|\\.\\d+)([eE][+-]?[0-9]+)?$'},
                "colIndex": {'constraint': '^[+-]?((\\d+(\\.\\d*)?)|\\.\\d+)([eE][+-]?[0-9]+)?$'}
        }

    name = property(lambda self: self.getAttribute("name"), lambda self, data: self.setAttribute('name', data))
    rows = property(lambda self: self.getAttribute("rows"))
    flow = property(lambda self: self.getAttribute("flow"), lambda self, data: self.setAttribute('flow', data))
    rowIndex = property(lambda self: self.getAttribute("rowIndex"),
                        lambda self, data: self.setAttribute('rowIndex', data))
    colIndex = property(lambda self: self.getAttribute("colIndex"),
                        lambda self, data: self.setAttribute('colIndex', data))


    @staticmethod
    def generateLayout(rowCount, colCount):
        rowDefs = ""
        colDefs = ""

        for i in range(rowCount):
            rowDefs += Row().getXamlCode()
        for j in range(colCount):
            colDefs += Cell().getXamlCode()

        return rowDefs, colDefs


    def getXamlCode(self, rowIndex=None, colIndex=None):
        rowDefinition = ""
        colDefinition = ""
        content = ""
        lRowIndex = -1
        lColIndex = -1
        extraAttributesFormat = "Grid.Column='%s' Grid.Row='%s'"
        if rowIndex is not None and  colIndex is not None:
            self.rowIndex = rowIndex
            self.colIndex = colIndex

        for row in self.rows:
            lRowIndex += 1
            rowDefinition += row.getXamlCode() + "\n"

            for col in row.cells:
                lColIndex += 1
                colDefinition += col.getXamlCode() + "\n"

                if len(col.widgets) == 1:
                    content += col.widgets[0].getXamlCode(lRowIndex, lColIndex) + "\n"
                else:
                    innerContent = ""
                    attributes = extraAttributesFormat % (lColIndex, lRowIndex)
                    #                    l = []

                    if col.flow == "horizontal":
                        l = Layout.generateLayout(0, len(col.widgets))
                    elif col.flow == "vertical":
                        l = Layout.generateLayout(len(col.widgets), 0)
                    elif not col.flow.strip():
                        l = Layout.generateLayout(len(col.widgets), 0)
                    else:
                        raise Exception, "Wrong flow value"

                    innerRowIndex = -1
                    innerColIndex = -1
                    for widget in col.widgets:
                        innerRowIndex += 1
                        innerColIndex += 1
                        if col.flow == "horizontal":
                            innerContent += widget.getXamlCode(0, innerColIndex) + "\n"
                        else:
                            innerContent += widget.getXamlCode(innerRowIndex, 0) + "\n"

                    content += Layout.xamlTemplate.substitute(dict(attributes=attributes, rowsDefinition=l[0],
                                                                   colsDefinition=l[1], content=innerContent))

            return self.generateXamlCode(self.xamlTemplate, self.attributesMap, rowsDefinition=rowDefinition,
                                         colsDefinition=colDefinition, content=content)


class WidgetSelector(object):
    widgets = {"datetimepicker": DateTimePicker,
               "spinner": Spinner,
               "checkbox": CheckBox,
               "combo": Combo,
               "image": Image,
               "radiobutton": RadioButton,
               "textbox": TextBox,
               "label": Label,
               "listbox": ListBox,
               "button": Button,
               "layout": Layout,
               "cell": Cell,
               "row": Row,
               "page": Page
    }

    @staticmethod
    def selectWidget(name):
        return WidgetSelector.widgets.get(name.lower(), None)()
        #l = Label()
        #b = Button()
        #print WidgetSelector.selectWidget("datetimepicker")
        #l.addWidget(b)
