################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
from model.models import Model
from string import Template
import os
from util.utils import separateClassName, UniqueMap, ResettableMap

class AbstractWidget(Model):
    xamlTemplate = Template("""
        <$widget $attributes Grid.Row='$row' Grid.Column='$col'/>"""
    )

    #    attributesMap = {
    #        'tabindex': {"cs": "TabIndex='$value'"},
    #        'name': {"cs": "Name='$value'"},
    #        'width': {"cs": "Width='$value'"},
    #        'enabled': {"cs": "IsEnabled='$value'"},
    #        'height': {"cs": "Height='$value'"},
    #        'visible': {"cs": "Visibility='$value'"},
    #        'source': {"cs": "='$value'"},
    #        'verticalalignment': {"cs": "VerticalAlignment='$value'"},
    #        'horizontalalignment': {"cs": "HorizontalAlignment='$value'"},
    #        'label': {"cs": "Content='$value'"},
    #        'location': {"cs": "='$value'"},
    #        'rowindex': {'cs': "Grid.Row='$value'"},
    #        'colindex': {'cs': "Grid.Column='$value'"}
    #    }


    attributesMap = ResettableMap(
        tabindex={"cs": "TabIndex='$value'"},
        name={"cs": "Name='$value'"},
        width={"cs": "Width='$value'"},
        enabled={"cs": "IsEnabled='$value'"},
        height={"cs": "Height='$value'"},
        visible={"cs": "Visibility='$value'"},
        source={"cs": "ItemsSource='$value'"},
        verticalalignment={"cs": "VerticalAlignment='$value'"},
        horizontalalignment={"cs": "HorizontalAlignment='$value'"},
        label={"cs": "Content='$value'"},
        location={"cs": "='$value'"},
        rowindex={'cs': "Grid.Row='$value'"},
        colindex={'cs': "Grid.Column='$value'"}
    )


    def getCsCode(self, rowIndex=None, colIndex=None):
        pass

    def getHtmlCode(self):
        pass


    def generateXamlCode(self, template=None, attributesMap=None, **kwargs):
        if not template:
            template = self.xamlTemplate

        if not attributesMap: attributesMap = {}
        atts = ""

        AbstractWidget.attributesMap.update(attributesMap)

        for element in self.getNoneEmptyAttributes():
            if not AbstractWidget.attributesMap.has_key(element[0].lower()):
                continue
            attTemplate = Template(AbstractWidget.attributesMap[element[0].lower()]['cs'])
            attValue = str(element[1]['value'])
            if attValue.startswith("@"):
                attValue = AbstractWidget.__getXamlBindingCode(attValue)
            atts += "%s  " % attTemplate.substitute({'value': attValue})

        kwargs.update(dict(attributes=atts))

        AbstractWidget.attributesMap.reset()
        return template.substitute(kwargs)

    @staticmethod
    def __getXamlBindingCode(value):
        return "{Binding %s,Mode=TwoWay}" % value[1:]


class BaseWidget(AbstractWidget, Model):
    """Base class for all widgets."""

    def __init__(self):
        object.__init__(self)
        Model.__init__(self, self.__defaults())

    def __defaults(self):
    #            {'constraint': '^[+-]?((\\d+(\\.\\d*)?)|\\.\\d+)([eE][+-]?[0-9]+)?$'}
        return {'tabindex': {},
                'name': {},
                'width': {},
                'enabled': {},
                'tooltip': {},
                'height': {},
                'visible': {},
                'horizontalalignment': {},
                'source': {},
                'verticalalignment': {},
                'label': {},
                'location': {},
                'widgets': {}}


    height = property(lambda self: self.getAttribute("height"),
                      lambda self, data: self.setAttribute('height', data))

    visible = property(lambda self: self.getAttribute("visible"),
                       lambda self, data: self.setAttribute('visible', data))

    horizontalAlignment = property(lambda self: self.getAttribute("horizontalAlignment"),
                                   lambda self, data: self.setAttribute('horizontalAlignment', data))

    name = property(lambda self: self.getAttribute("name"),
                    lambda self, data: self.setAttribute('name', data))

    width = property(lambda self: self.getAttribute("width"),
                     lambda self, data: self.setAttribute('width', data))

    enabled = property(lambda self: self.getAttribute("enabled"),
                       lambda self, data: self.setAttribute('enabled', data))

    tooltip = property(lambda self: self.getAttribute("tooltip"),
                       lambda self, data: self.setAttribute('tooltip', data))

    label = property(lambda self: self.getAttribute("label"),
                     lambda self, data: self.setAttribute('label', data))

    source = property(lambda self: self.getAttribute("source"),
                      lambda self, data: self.setAttribute('source', data))

    verticalAlignment = property(lambda self: self.getAttribute("verticalAlignment"),
                                 lambda self, data: self.setAttribute('verticalAlignment', data))

    location = property(lambda self: self.getAttribute("location"),
                        lambda self, data: self.setAttribute('location', data))

    tabindex = property(lambda self: self.getAttribute("tabindex"),
                        lambda self, data: self.setAttribute('tabindex', data))

    widgets = property(lambda self: self.getAttribute("widgets"))

    @staticmethod
    def isWidget(widget):
    #        return type(widget) in WidgetSelector.widgets.itervalues()
        return isinstance(widget, AbstractWidget)

    def addWidget(self, widget):
        if not BaseWidget.isWidget(widget):
            raise Exception, "Unknown widget type %s" % widget
        self.widgets[widget.name] = widget


##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class DateTimePicker(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <DatePicker $attributes/>"""
#    )

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {'showDayHeader': {},
                'selectionMode': {},
                'showNextPrevMonth': {}}

    def getCsCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(widget="DatePicker", row=rowIndex, col=colIndex)


    showDayHeader = property(lambda self: self.getAttribute("showDayHeader"),
                             lambda self, data: self.setAttribute('showDayHeader', data))

    selectionMode = property(lambda self: self.getAttribute("selectionMode"),
                             lambda self, data: self.setAttribute('selectionMode', data))

    showNextPrevMonth = property(lambda self: self.getAttribute("showNextPrevMonth"),
                                 lambda self, data: self.setAttribute('showNextPrevMonth', data))


##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class Spinner(BaseWidget, Model):
    xamlTemplate = Template("""
        <Spinner Name='$name'  Height='$height' Width='$width' TabIndex='$tabIndex' IsEnabled='$isEnabled'
        Visibility='$visibility' ToolTip='$toolTip' Grid.Row='$row' Grid.Column='@column' Grid.ColumnSpan='$colSpan'
         Grid.RowSpan='$rowSpan' VerticalAlignment='$verticalAlignment' HorizontalAlignment='$horizontalAlignment'
             />"""
    )

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {'type': {},
                'maxValue': {},
                'minValue': {}}


    type = property(lambda self: self.getAttribute("type"), lambda self, data: self.setAttribute('type', data))

    maxValue = property(lambda self: self.getAttribute("maxValue"),
                        lambda self, data: self.setAttribute('maxValue', data))

    minValue = property(lambda self: self.getAttribute("minValue"),
                        lambda self, data: self.setAttribute('minValue', data))

##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class CheckBox(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <CheckBox $attributes/>"""
#    )
    attributesMap = {
        'checked': {"cs':'Checked='$value'"}
    }

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {'checked': {}}

    checked = property(lambda self: self.getAttribute("checked"),
                       lambda self, data: self.setAttribute('checked', data))

    def getCsCode(self, rowIndex=None, colIndex=None):
        self.generateXamlCode(attributesMap=self.attributesMap, widget="CheckBox", row=rowIndex, col=colIndex)

        #,row=rowIndex,col=colIndex

##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class Combo(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <ComboBox $attributes/>"""
#    )

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {}

    def getCsCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(widget="ComboBox", row=rowIndex, col=colIndex)


##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class Image(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <Image $attributes/>"""
#    )

    attributesMap = {
        'src': {"cs':'Source='$value'"}
    }

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {'src': {},
                'alt': {}}


    src = property(lambda self: self.getAttribute("src"), lambda self, data: self.setAttribute('src', data))

    alt = property(lambda self: self.getAttribute("alt"), lambda self, data: self.setAttribute('alt', data))

    def getCsCode(self, rowIndex=None, colIndex=None):
        self.generateXamlCode(attributesMap=self.attributesMap, widget="Image", row=rowIndex, col=colIndex)


##############################   end of class    ###############################

class Repeater(BaseWidget, Model):
    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {"widgets": {'value': UniqueMap()}}

    widgets = property(lambda self: self.getAttribute("widgets"))

    def addWidget(self, widget):
        self.widgets[widget.name] = widget


    def getCsCode(self, rowIndex=None, colIndex=None):
        self.generateXamlCode(attributesMap=self.attributesMap, widget="Image", row=rowIndex, col=colIndex)


################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################

class RadioButton(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <RadioButton $attributes/>"""
#    )

    attributesMap = {
        'groupName': {"cs": "GroupName='$value'"},
        'checked': {"cs": "Checked='$value'"}
    }

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {'groupName': {},
                'checked': {}}


    groupName = property(lambda self: self.getAttribute("groupName"),
                         lambda self, data: self.setAttribute('groupName', data))

    checked = property(lambda self: self.getAttribute("checked"), lambda self, data: self.setAttribute('checked', data))

    def getCsCode(self, rowIndex=None, colIndex=None):
        self.generateXamlCode(attributesMap=self.attributesMap, widget="RadioButton", row=rowIndex, col=colIndex)

##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class TextBox(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <TextBox $attributes/>"""
#    )

    attributesMap = {
        'readonly': {'cs': "IsReadOnly='$value'"},
        'textMode': {'cs': ""},
        'textalignment': {'cs': "TextAlignment='$value'"},
        'label': {"cs": "Text='$value'"}

    }


    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {'readonly': {},
                'textMode': {},
                'textAlignment': {}}


    readonly = property(lambda self: self.getAttribute("readonly"),
                        lambda self, data: self.setAttribute('readonly', data))

    textMode = property(lambda self: self.getAttribute("textMode"),
                        lambda self, data: self.setAttribute('textMode', data))

    textAlignment = property(lambda self: self.getAttribute("textAlignment"),
                             lambda self, data: self.setAttribute('textAlignment', data))

    def getHtmlCode(self):
        return self.__dict__

        #        super(TextBox, self).getHtmlCode()

    def getCsCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(attributesMap=self.attributesMap, widget="TextBox", row=rowIndex, col=colIndex)


##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class Label(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <Label $attributes/>"""
#    )

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {}

    def getCsCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(widget="Label", row=rowIndex, col=colIndex)


##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class ListBox(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <ListBox $attributes/>"""
#    )

    attributesMap = {
        'selectionMode': {'cs': "selectionMode='$value'"}
    }

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {'selectionMode': {}}


    selectionMode = property(lambda self: self.getAttribute("selectionMode"),
                             lambda self, data: self.setAttribute('selectionMode', data))


    def getCsCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(attributesMap=self.attributesMap, widget="ListBox", row=rowIndex, col=colIndex)
        ##############################   end of class    ###############################

################################################################################
#####################   Generated by mutil version "1.1"    ####################
################################################################################
class Button(BaseWidget, Model):
#    xamlTemplate = Template("""
#        <Button $attributes Grid.Row='$row' Grid.Column='$col'/>"""
#    )

    def __init__(self):
        Model.__init__(self, self.__defaults())
        BaseWidget.__init__(self)

    def __defaults(self):
        return {}

    def getHtmlCode(self):
        pass


    def getCsCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(widget="Button", row=rowIndex, col=colIndex)

        #        attributes = ""

#        for element in self.getNoneEmptyAttributes():
#            attTemplate = Template(BaseWidget.attributesMap[element[0].lower()]['cs'])
#            attValue = str(element[1]['value'])
#            attributes += "%s  " % attTemplate.substitute({'value': attValue})
#
#        return self.xamlTemplate.substitute(dict(attributes=attributes))


##############################   end of class    ###############################


class Page(AbstractWidget):
    xamlTemplate = Template("""
<Window x:Class="$domain.$name"

        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"

        xmlns:vm="clr-namespace:$dmdomain"

        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"

        Title="$title" Height="350" Width="525">

    <Window.DataContext>
        <vm:$dataModel />
    </Window.DataContext>
        $content
</Window>
    """)


    def __int__(self):
        return 1

    def __str__(self):
        return self.name

    def __init__(self):
        Model.__init__(self, self.__defaults())

    def addWidget(self, widget):
        if self.layout:
            raise  Exception, "When layout already defined, widget should not add"
        self.addWidgetName(widget.name)
        self.widgets.append(widget)

    def addWidgetName(self, name):
        if name in self.widgetNames:
            raise  Exception, "Duplicate widget name : %s " % name
        self.widgetNames.append(name)

    def __defaults(self):
        return {'widgets': {'value': []},
                'widgetNames': {'value': []},
                'layout': {},
                'name': {},
                'dataModel': {},
                'domain': {},
                'title': {}
        }

    widgets = property(lambda self: self.getAttribute("widgets"))
    widgetNames = property(lambda self: self.getAttribute("widgetNames"))
    layout = property(lambda self: self.getAttribute("layout"), lambda self, data: self.setAttribute('layout', data))
    name = property(lambda self: self.getAttribute("name"), lambda self, data: self.setAttribute('name', data))
    dataModel = property(lambda self: self.getAttribute("dataModel"),
                         lambda self, data: self.setAttribute('dataModel', data))
    domain = property(lambda self: self.getAttribute("domain"),
                      lambda self, data: self.setAttribute('domain', data))
    title = property(lambda self: self.getAttribute("title"),
                     lambda self, data: self.setAttribute('title', data))

    def createCsCode(self, outputPath):
        dmDomain, dmClass = separateClassName(self.dataModel)

        osDomainPath = self.domain.replace(".", "/")
        osDomainPath = os.path.join(outputPath, osDomainPath)
        try:
            os.makedirs(osDomainPath)
        except Exception as x:
            print x.message

        #        print self.__getXamlCsCode()

        tData = self.xamlTemplate.substitute(
            dmdomain=dmDomain, dataModel=dmClass, content=self.layout.getCsCode(),

            domain=self.domain, title=self.title, name=self.name)

        filePath = os.path.join(osDomainPath, str(self) + ".xaml")
        #        filePath = os.path.join(outputPath, filePath)

        extraFilePath = os.path.join(osDomainPath, str(self) + ".xaml.cs")
        with open(filePath, 'w') as f:
            f.write(tData)

        with open(extraFilePath, 'w') as f:
            f.write(self.__getXamlCsCode())


    def __getXamlCsCode(self):
        template = Template(
            """
using System.Windows;

namespace $domain {
    /// <summary>
    /// Interaction logic for $name.xaml
    /// </summary>
    public partial class $name : Window {
        public $name() {
            InitializeComponent();
        }
    }
}
    """)

        return template.substitute(
            domain=self.domain,
            name=self.name
        )


class  Row(AbstractWidget):
    xamlTemplate = Template("<RowDefinition  $attributes/>")

    attributesMap = {
        'height': {'cs': "Height='$value'"}
    }

    def __init__(self):
        Model.__init__(self, self.__defaults())

    def addCell(self, cell):
        self.cells.append(cell)

    def __defaults(self):
        return {'cells': {'value': []},
                'height': {}
        }

    cells = property(lambda self: self.getAttribute("cells"))
    height = property(lambda self: self.getAttribute("height"), lambda self, data: self.setAttribute('height', data))

    def getCsCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(self.xamlTemplate, self.attributesMap, row=rowIndex, col=colIndex)


class  Cell(AbstractWidget):
    xamlTemplate = Template(( "<ColumnDefinition $attributes/>" ))

    attributesMap = {
        "width": {"cs": "Width='$value'"},
        "name": {"cs": "Name='$value'"}
    }

    def __init__(self):
        Model.__init__(self, self.__defaults())

    def addWidget(self, widget):
        if not BaseWidget.isWidget(widget):
            raise Exception, "Malformed widget type"
        self.widgets.append(widget)

    def __defaults(self):
        return {'widgets': {'value': []},
                'name': {},
                'flow': {},
                'width': {},
                'colSpan': {},
                'rowSpan': {}
        }

    widgets = property(lambda self: self.getAttribute("widgets"))
    name = property(lambda self: self.getAttribute("name"), lambda self, data: self.setAttribute('name', data))
    flow = property(lambda self: self.getAttribute("flow"), lambda self, data: self.setAttribute('flow', data))
    width = property(lambda self: self.getAttribute("width"), lambda self, data: self.setAttribute('width', data))
    rowSpan = property(lambda self: self.getAttribute("rowSpan"), lambda self, data: self.setAttribute('rowSpan', data))
    colSpan = property(lambda self: self.getAttribute("colSpan"), lambda self, data: self.setAttribute('colSpan', data))


    def getCsCode(self, rowIndex=None, colIndex=None):
        return self.generateXamlCode(self.xamlTemplate, self.attributesMap, row=rowIndex, col=colIndex)


class  Layout(AbstractWidget):
#    Grid.Row='$row' Grid.Column='$col'
    xamlTemplate = Template("""
    <Grid  $attributes >
    <Grid.RowDefinitions>
        $rowsDefinition
    </Grid.RowDefinitions>

    <Grid.ColumnDefinitions>
      $colsDefinition
    </Grid.ColumnDefinitions>

      $content
    </Grid>
    """)

    #Width='$width' Height='$height'


    def __init__(self):
    #        AbstractWidget.__init__(self)
        Model.__init__(self, self.__defaults())

    def addRow(self, row):
        if type(row) <> Row:
            raise Exception, "Malformed row type"
        self.rows.append(row)

    def __defaults(self):
        return {'name': {},
                'rows': {'value': []},
                'flow': {},
                "rowIndex": {},
                "colIndex": {},
                "domain": {},
                "height": {},
                "width": {}
        }

    name = property(lambda self: self.getAttribute("name"),
                    lambda self, data: self.setAttribute('name', data))

    height = property(lambda self: self.getAttribute("height"),
                      lambda self, data: self.setAttribute('height', data))

    width = property(lambda self: self.getAttribute("width"),
                     lambda self, data: self.setAttribute('width', data))

    rows = property(lambda self: self.getAttribute("rows"))
    flow = property(lambda self: self.getAttribute("flow"),
                    lambda self, data: self.setAttribute('flow', data))

    rowIndex = property(lambda self: self.getAttribute("rowIndex"),
                        lambda self, data: self.setAttribute('rowIndex', data))

    colIndex = property(lambda self: self.getAttribute("colIndex"),
                        lambda self, data: self.setAttribute('colIndex', data))

    domain = property(lambda self: self.getAttribute("domain"), lambda self, data: self.setAttribute('domain', data))

    @staticmethod
    def generateLayout(rowCount, colCount):
        rowDefs = ""
        colDefs = ""

        for i in range(rowCount):
            rowDefs += Row().getCsCode()
        for j in range(colCount):
            colDefs += Cell().getCsCode()

        return rowDefs, colDefs


    def getCsCode(self, rowIndex=None, colIndex=None):
        rowDefinition = ""
        colDefinition = Cell().getCsCode()
        content = ""
        lRowIndex = -1
        lColIndex = -1
        maxColCount = -1

        extraAttributesFormat = "Grid.Column='%s' Grid.Row='%s'"
        if rowIndex is not None and  colIndex is not None:
            self.rowIndex = rowIndex
            self.colIndex = colIndex

        for row in self.rows:
            lRowIndex += 1
            rowDefinition += row.getCsCode() + "\n"
            lColIndex = -1

            colCount = 0

            for col in row.cells:
                colCount += 1

                lColIndex += 1
                #                colDefinition += col.getCsCode() + "\n"

                if len(col.widgets) == 1:
                    content += col.widgets[0].getCsCode(lRowIndex, lColIndex) + "\n"
                else:
                    innerContent = ""
                    attributes = extraAttributesFormat % (lColIndex, lRowIndex)
                    #                    l = []

                    if col.flow == "horizontal":
                        l = Layout.generateLayout(0, len(col.widgets))
                    elif col.flow == "vertical":
                        l = Layout.generateLayout(len(col.widgets), 0)
                    elif not col.flow.strip():
                        l = Layout.generateLayout(len(col.widgets), 0)
                    else:
                        raise Exception, "Wrong flow value"

                    innerRowIndex = -1
                    innerColIndex = -1
                    for widget in col.widgets:
                        innerRowIndex += 1
                        innerColIndex += 1
                        if col.flow == "horizontal":
                            innerContent += widget.getCsCode(0, innerColIndex) + "\n"
                        else:
                            innerContent += widget.getCsCode(innerRowIndex, 0) + "\n"

                    content += Layout.xamlTemplate.substitute(dict(attributes=attributes, rowsDefinition=l[0],
                                                                   colsDefinition=l[1], content=innerContent))

            if colCount > maxColCount:
                maxColCount = colCount

        colDefinition = colDefinition * maxColCount
        return self.generateXamlCode(self.xamlTemplate, self.attributesMap, rowsDefinition=rowDefinition,
                                     colsDefinition=colDefinition, content=content)

    def createCsCode(self, outputPath):
        pass

#class WidgetSelector(object):



def selectWidget(name):
    widgets = {
        "datepicker": DateTimePicker,
        "spinner": Spinner,
        "checkbox": CheckBox,
        "combo": Combo,
        "image": Image,
        "radiobutton": RadioButton,
        "textbox": TextBox,
        "label": Label,
        "listbox": ListBox,
        "button": Button,
        "layout": Layout,
        "cell": Cell,
        "row": Row,
        "page": Page,
        "repeater": Repeater
    }

    result = widgets.get(name.lower(), None)
    if result:
        return result()
    else:
        raise Exception, "%s not defined" % name
        #l = Label()
        #b = Button()
        #print WidgetSelector.selectWidget("datetimepicker")
        #l.addWidget(b)